<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonHelpers</name>
    </assembly>
    <members>
        <member name="T:CommonHelpers.Cryptography">
            <summary>
            Class used to encrypt and decrypt strings with a given key
            </summary>
        </member>
        <member name="M:CommonHelpers.Cryptography.Encrypt(System.String,System.String)">
            <summary>
            Encrypts specified plaintext using Rijndael symmetric key algorithm
            and returns a base64-encoded result.
            </summary>
            <param name="plainText">
            Plaintext value to be encrypted.
            </param>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
            <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
            <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
            <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
            <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long.
            </param>
            <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256.
            Longer keys are more secure than shorter keys.
            </param>
            <returns>
            Encrypted value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:CommonHelpers.Cryptography.Decrypt(System.String,System.String)">
            <summary>
            Decrypts specified ciphertext using Rijndael symmetric key algorithm.
            </summary>
            <param name="cipherText">
            Base64-formatted ciphertext value.
            </param>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
            <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
            <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
            <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
            <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long.
            </param>
            <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256.
            Longer keys are more secure than shorter keys.
            </param>
            <returns>
            Decrypted string value.
            </returns>
            <remarks>
            Most of the logic in this function is similar to the Encrypt
            logic. In order for decryption to work, all parameters of this function
            - except cipherText value - must match the corresponding parameters of
            the Encrypt function which was called to generate the
            ciphertext.
            </remarks>
        </member>
        <member name="T:CommonHelpers.JsonUtilities">
            <summary>
            The class used to serialize and deserialize object using the JSON format
            It uses only public properties of the serialized/deserialized objects
            </summary>
        </member>
        <member name="M:CommonHelpers.JsonUtilities.FromJson``1(System.String)">
            <summary>
            Deserializes an object of the T type
            </summary>
            <typeparam name="T">
            The type of the deserialized object
            </typeparam>
            <param name="json">
            The string containing the JSON where the object is serialized
            </param>
            <returns></returns>
        </member>
        <member name="M:CommonHelpers.JsonUtilities.ToJson(System.Object)">
            <summary>
            Function to serialize objects in a string using the JSON format
            It ignores the NULL properties
            </summary>
            <param name="obj">
            The serialized object
            </param>
            <returns>
            The string containing the JSON serialization of the object
            </returns>
        </member>
        <member name="T:CommonHelpers.RegexUtilities">
            <summary>
            Class that encapsulates methods simplifying the work with Regular Expressions
            </summary>
        </member>
        <member name="M:CommonHelpers.RegexUtilities.RegexIsMatchString(System.String,System.String)">
            <summary>
            Method that checks if the regular expression matches the string
            </summary>
            <param name="regexPattern">
            The regular expression
            </param>
            <param name="testedString">
            The tested string
            </param>
            <returns>
            True if the regex matches the string, false otherwise
            </returns>
        </member>
    </members>
</doc>
